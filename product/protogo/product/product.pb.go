// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product.proto

/*
Package product is a generated protocol buffer package.

It is generated from these files:
	product.proto

It has these top-level messages:
	ProductQueryRequest
	ProductResponse
	ProductListResponse
*/
package product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProductQueryRequest struct {
	ID         int32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	CategoryID int32 `protobuf:"varint,2,opt,name=CategoryID" json:"CategoryID,omitempty"`
}

func (m *ProductQueryRequest) Reset()                    { *m = ProductQueryRequest{} }
func (m *ProductQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductQueryRequest) ProtoMessage()               {}
func (*ProductQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProductQueryRequest) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ProductQueryRequest) GetCategoryID() int32 {
	if m != nil {
		return m.CategoryID
	}
	return 0
}

type ProductResponse struct {
	ID          int32   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	CategoryID  int32   `protobuf:"varint,2,opt,name=CategoryID" json:"CategoryID,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Description string  `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	Image       string  `protobuf:"bytes,5,opt,name=Image" json:"Image,omitempty"`
	Stock       int32   `protobuf:"varint,6,opt,name=Stock" json:"Stock,omitempty"`
	Price       float32 `protobuf:"fixed32,7,opt,name=Price" json:"Price,omitempty"`
}

func (m *ProductResponse) Reset()                    { *m = ProductResponse{} }
func (m *ProductResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductResponse) ProtoMessage()               {}
func (*ProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProductResponse) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ProductResponse) GetCategoryID() int32 {
	if m != nil {
		return m.CategoryID
	}
	return 0
}

func (m *ProductResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProductResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ProductResponse) GetStock() int32 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *ProductResponse) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type ProductListResponse struct {
	ProductList []*ProductResponse `protobuf:"bytes,1,rep,name=ProductList" json:"ProductList,omitempty"`
}

func (m *ProductListResponse) Reset()                    { *m = ProductListResponse{} }
func (m *ProductListResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductListResponse) ProtoMessage()               {}
func (*ProductListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProductListResponse) GetProductList() []*ProductResponse {
	if m != nil {
		return m.ProductList
	}
	return nil
}

func init() {
	proto.RegisterType((*ProductQueryRequest)(nil), "product.ProductQueryRequest")
	proto.RegisterType((*ProductResponse)(nil), "product.ProductResponse")
	proto.RegisterType((*ProductListResponse)(nil), "product.ProductListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProductService service

type ProductServiceClient interface {
	FindByID(ctx context.Context, in *ProductQueryRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	FindByCategory(ctx context.Context, in *ProductQueryRequest, opts ...grpc.CallOption) (ProductService_FindByCategoryClient, error)
	FindAll(ctx context.Context, in *ProductQueryRequest, opts ...grpc.CallOption) (ProductService_FindAllClient, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) FindByID(ctx context.Context, in *ProductQueryRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/product.ProductService/FindByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FindByCategory(ctx context.Context, in *ProductQueryRequest, opts ...grpc.CallOption) (ProductService_FindByCategoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProductService_serviceDesc.Streams[0], c.cc, "/product.ProductService/FindByCategory", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceFindByCategoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_FindByCategoryClient interface {
	Recv() (*ProductListResponse, error)
	grpc.ClientStream
}

type productServiceFindByCategoryClient struct {
	grpc.ClientStream
}

func (x *productServiceFindByCategoryClient) Recv() (*ProductListResponse, error) {
	m := new(ProductListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) FindAll(ctx context.Context, in *ProductQueryRequest, opts ...grpc.CallOption) (ProductService_FindAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProductService_serviceDesc.Streams[1], c.cc, "/product.ProductService/FindAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceFindAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_FindAllClient interface {
	Recv() (*ProductListResponse, error)
	grpc.ClientStream
}

type productServiceFindAllClient struct {
	grpc.ClientStream
}

func (x *productServiceFindAllClient) Recv() (*ProductListResponse, error) {
	m := new(ProductListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ProductService service

type ProductServiceServer interface {
	FindByID(context.Context, *ProductQueryRequest) (*ProductResponse, error)
	FindByCategory(*ProductQueryRequest, ProductService_FindByCategoryServer) error
	FindAll(*ProductQueryRequest, ProductService_FindAllServer) error
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FindByID(ctx, req.(*ProductQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FindByCategory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).FindByCategory(m, &productServiceFindByCategoryServer{stream})
}

type ProductService_FindByCategoryServer interface {
	Send(*ProductListResponse) error
	grpc.ServerStream
}

type productServiceFindByCategoryServer struct {
	grpc.ServerStream
}

func (x *productServiceFindByCategoryServer) Send(m *ProductListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductService_FindAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).FindAll(m, &productServiceFindAllServer{stream})
}

type ProductService_FindAllServer interface {
	Send(*ProductListResponse) error
	grpc.ServerStream
}

type productServiceFindAllServer struct {
	grpc.ServerStream
}

func (x *productServiceFindAllServer) Send(m *ProductListResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByID",
			Handler:    _ProductService_FindByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindByCategory",
			Handler:       _ProductService_FindByCategory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAll",
			Handler:       _ProductService_FindAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product.proto",
}

func init() { proto.RegisterFile("product.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x49, 0xf7, 0xa7, 0x7a, 0x8a, 0x15, 0xa2, 0x17, 0x41, 0x44, 0x4a, 0xaf, 0x7a, 0x35,
	0x64, 0xde, 0x79, 0xe7, 0xac, 0x4a, 0x41, 0xc6, 0x96, 0x3d, 0x41, 0xed, 0x0e, 0x23, 0xb8, 0x35,
	0x35, 0x4d, 0x85, 0x3d, 0x9a, 0x0f, 0xe5, 0x3b, 0x48, 0x93, 0x4e, 0xc3, 0x44, 0x44, 0xbc, 0x3b,
	0xdf, 0x77, 0xca, 0xef, 0xf4, 0xfb, 0x08, 0x1c, 0x55, 0x4a, 0x2e, 0x9b, 0x42, 0x8f, 0x2a, 0x25,
	0xb5, 0xa4, 0x7e, 0x27, 0xe3, 0x3b, 0x38, 0x99, 0xd9, 0x71, 0xde, 0xa0, 0xda, 0x72, 0x7c, 0x69,
	0xb0, 0xd6, 0x34, 0x04, 0x2f, 0x4b, 0x19, 0x89, 0x48, 0x32, 0xe0, 0x5e, 0x96, 0xd2, 0x0b, 0x80,
	0xdb, 0x5c, 0xe3, 0x4a, 0xaa, 0x6d, 0x96, 0x32, 0xcf, 0xf8, 0x8e, 0x13, 0xbf, 0x11, 0x38, 0xee,
	0x38, 0x1c, 0xeb, 0x4a, 0x96, 0x35, 0xfe, 0x95, 0x41, 0x29, 0xf4, 0xa7, 0xf9, 0x06, 0x59, 0x2f,
	0x22, 0xc9, 0x21, 0x37, 0x33, 0x8d, 0x20, 0x48, 0xb1, 0x2e, 0x94, 0xa8, 0xb4, 0x90, 0x25, 0xeb,
	0x9b, 0x95, 0x6b, 0xd1, 0x53, 0x18, 0x64, 0x9b, 0x7c, 0x85, 0x6c, 0x60, 0x76, 0x56, 0xb4, 0xee,
	0x42, 0xcb, 0xe2, 0x99, 0x0d, 0xcd, 0x19, 0x2b, 0x5a, 0x77, 0xa6, 0x44, 0x81, 0xcc, 0x8f, 0x48,
	0xe2, 0x71, 0x2b, 0xe2, 0xf9, 0x67, 0x05, 0x8f, 0xa2, 0xfe, 0xfa, 0xfd, 0x6b, 0x08, 0x1c, 0x9b,
	0x91, 0xa8, 0x97, 0x04, 0x63, 0x36, 0xda, 0xf5, 0xb8, 0x97, 0x96, 0xbb, 0x1f, 0x8f, 0xdf, 0x09,
	0x84, 0x9d, 0x5e, 0xa0, 0x7a, 0x15, 0x05, 0xd2, 0x09, 0x1c, 0xdc, 0x8b, 0x72, 0x39, 0x69, 0x93,
	0x9e, 0xef, 0x53, 0xdc, 0xee, 0xcf, 0x7e, 0xbc, 0x41, 0xa7, 0x10, 0x5a, 0xc6, 0xae, 0xb5, 0x5f,
	0x48, 0xdf, 0xb6, 0x6e, 0xc0, 0x4b, 0x42, 0x1f, 0xc0, 0x6f, 0x79, 0x37, 0xeb, 0xf5, 0xff, 0x40,
	0x4f, 0x43, 0xf3, 0xaa, 0xae, 0x3e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xc0, 0x29, 0xd2, 0x66,
	0x02, 0x00, 0x00,
}
